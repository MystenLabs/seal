name: Docs Deploy

on:
  workflow_dispatch:

concurrency:
  group: docs-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    name: Build and deploy MkDocs to Walrus
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1

      - name: Set up Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # pin@v5.0.0
        with:
          python-version: '3.11'

      - name: Install MkDocs and Material theme
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          mkdocs --version

      - name: Clean site directory
        run: |
          rm -rf site

      - name: Build MkDocs site
        run: |
          mkdocs build --strict

      - name: Copy ws-resources.json into built site
        run: |
          if [ -f ws-resources.json ]; then
            cp ws-resources.json site/
          else
            echo "ws-resources.json not found at repo root" >&2
            exit 1
          fi

      - name: Install Sui CLI (Homebrew)
        run: |
          brew update
          brew install sui || (brew tap mystenlabs/tap && brew install mystenlabs/tap/sui)
          sui --version

      - name: Initialize Sui client config (non-interactive)
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.sui/sui_config"
          # Initialize keystore with valid empty JSON array
          echo '[]' > "$HOME/.sui/sui_config/sui.keystore"
          # Write minimal client.yaml pointing to keystore and mainnet env
          cat > "$HOME/.sui/sui_config/client.yaml" <<YAML
          keystore:
            File: "$HOME/.sui/sui_config/sui.keystore"
          envs:
            - alias: mainnet
              rpc: "https://fullnode.mainnet.sui.io:44"
          active_env: mainnet
          # Active address will be set later after key import
          YAML
          # Show resulting config for debugging
          cat "$HOME/.sui/sui_config/client.yaml"

      - name: Configure Sui client for mainnet
        run: |
          # Create or update mainnet env and switch to it
          sui client new-env --alias mainnet --rpc https://fullnode.mainnet.sui.io:44 || true
          sui client switch --env mainnet

      - name: Show Sui client info
        run: |
          sui --version
          sui client envs || true
          sui client addresses || true

      - name: Import Sui private key and select address
        env:
          SEAL_WALLET_PRIVATE_KEY: ${{ secrets.SEAL_WALLET_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${SEAL_WALLET_PRIVATE_KEY:-}" ]; then
            echo "SEAL_WALLET_PRIVATE_KEY secret is not set. Add it in repository Settings > Secrets and variables > Actions." >&2
            exit 1
          fi
          # Import the ed25519 key (idempotent)
          sui keytool import "$SEAL_WALLET_PRIVATE_KEY" ed25519 || true

          # Desired address
          target_addr="0x7edc2e9108968bc3df2b5543cf9ce9ee7bcdc28b043044e51cc1900510b6f58e"
          # Switch by address directly; verify address exists first
          if sui client addresses | grep -qi "$target_addr"; then
            sui client switch --address "$target_addr"
            echo "Active address set to $target_addr"
          else
            echo "Target address $target_addr not found in imported key addresses" >&2
            sui client addresses || true
            exit 1
          fi

      - name: Install Walrus CLI
        run: |
          curl -sSf https://install.wal.app | sh
          # Ensure installed bins are on PATH for subsequent steps
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          which walrus || true
          walrus --version || true

      - name: Configure Walrus client
        run: |
          mkdir -p "$HOME/.config/walrus"
          curl -fsSL https://docs.wal.app/setup/client_config.yaml -o "$HOME/.config/walrus/client_config.yaml"
          curl -fsSL https://raw.githubusercontent.com/MystenLabs/walrus-sites/refs/heads/mainnet/sites-config.yaml -o "$HOME/.config/walrus/sites-config.yaml"

      - name: Install site-builder
        run: |
          set -euo pipefail
          arch=$(uname -m)
          if [ "$arch" = "arm64" ]; then
            SYSTEM="macos-arm64"
          else
            SYSTEM="macos-x86_64"
          fi
          curl -fsSL "https://storage.googleapis.com/mysten-walrus-binaries/site-builder-mainnet-latest-$SYSTEM" -o site-builder
          chmod +x site-builder

      - name: Deploy site to Walrus and verify
        run: |
          set -euo pipefail
          ls -la ./site || true
          export RUST_LOG=info

          # Retry deploy up to 4 times with backoff to handle transient network timeouts
          for attempt in 1 2 3 4; do
            echo "Deploy attempt $attempt"
            if ./site-builder deploy ./site --check-extend --epochs 50; then
              echo "Deploy succeeded on attempt $attempt";
              break
            fi
            if [ "$attempt" -eq 4 ]; then
              echo "Deploy failed after $attempt attempts" >&2
              exit 1
            fi
            sleep $((attempt * 15))
          done

          # Retry sitemap generation similarly
          for attempt in 1 2 3; do
            echo "Sitemap attempt $attempt"
            if ./site-builder sitemap @seal-docs; then
              echo "Sitemap succeeded on attempt $attempt";
              break
            fi
            if [ "$attempt" -eq 3 ]; then
              echo "Sitemap failed after $attempt attempts" >&2
              exit 1
            fi
            sleep $((attempt * 10))
          done


